目录

线程实现（重点）
线程状态
线程同步（重点）
线程通信问题

01  线程简介
任务、进程、线程、多线程

多任务
多线程
程序、进程、线程
一个进程可以有多个线程

Process与Thread
进程是程序执行的过程

线程是独立的执行路径
在程序运行时候，即使没有自己创建线程，后台也会有多个线程，如主线程、gc线程
main（）主线程，系统入口，用于执行整个程序
同一份资源操作时候，会存在资源抢夺问题，需要加入并发控制
一个进程，多个线程，线程的运行由调度器安排调度，调度器由操作系统紧密关联
线程会额外开销，如cpu调度时间，并发控制开销
每个线程在自己的工作内存交互，内存控制不会造成数据不一致


02  线程创建
Thread、Runnable、Callable
三种实现方式：
继承Thread类（重点）
实现Runnable接口（重点）
实现Callable接口（了解）

继承Thread类：
子类继承Thread类具备的多线程能力
启动线程：子类对象.start()
不建议使用：避免OOP单继承局限性

实现Runnable接口:
实现接口Runnable具有的多线程能力
启动线程：传入目标对象+Thread对象.start()
推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用


===============
Lambda 表达式：
JDK8 的一个新特性，可以取代大部分的匿名内部类，
写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构

希腊字母中第十一个

为什么用？
避免匿名内部类定义过多
代码简洁
只留下核心逻辑

函数式接口：
任何接口，如果只是包含唯一一个抽象方法
public interface Runnable{
    public abstract void run();
}
对于函数式接口，我们可以用lambda表达式创建接口对象


03  线程状态，5大状态
创建状态：Thread t = new Thread()
就绪状态:start()
运行状态
阻塞状态:sleep()
死亡状态

线程方法
setPriority  优先级
sleep  休眠
join  强制执行
yield  礼让
interrupt
isAlive

线程停止，标志位

线程休眠sleep
每个对象都有一把锁，sleep不会释放锁
模拟网络延时、倒计时

线程礼让yield
礼让后，重新进入就绪状态，重新竞争
让cpu重新调度，礼让不一定成功，看cpu心情

线程强制执行join


线程状态观测
常量定义的
Thread.state
NEW
RUNNABLE
BLOCKED
WAITING
TIMED WAITING
TERMINATED


线程的优先级
PRIORITY，默认都是5
java提供一个线程调度器
优先级数字表示，范围1-10
getPriori()
setPriori()
线程倒置

线程同步synchronized 锁机制
发生在，并发，多个线程操作同一个资源
对象的等待池,排队，队列
队列+锁，sleep时候，每个线程都有一把锁
问题：
保证安全，必然损失性能
性能倒置问题，优先级倒置，一个线优先级高的等待一个优先级低的线程

同步
同步方法；同步代码块
同步方法弊端：方法里需要修改的内容才需要锁，而只读的内容不需要锁，锁的多了，浪费资源

死锁
某一个同步块同时拥有两个以上对象的锁

锁 Lock
jdk5.0开始，显示定义同步锁
java.util.concurrent.locks.Lock接口
ReentrantLock实现了Lock，可重入锁

线程协作
生产者消费者模式，不是设计模式（23种设计模式）
生产者和消费者共享同一个资源，并且生产者和消费者之间互相依赖，互为条件
wait()
wait(long timeout)
notify()
notifyAll()
管程法


线程池
提高性能
线程管理：池子大小
ExecutorService
Executor
